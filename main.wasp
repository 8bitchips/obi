app formGen {
  wasp: {
    version: "^0.11.1"
  },
  title: "formGen",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    forms    Form[]
psl=}

entity Form {=psl
    id      Int     @id @default(autoincrement())
    title   String
    content String
    user    User    @relation(fields: [userId], references: [id])
    userId  Int
    Input   Input[]
psl=}

entity Input {=psl
    id     Int    @id @default(autoincrement())
    name   String
    type   String
    form   Form   @relation(fields: [formId], references: [id])
    formId Int
psl=}

action createForm {
  fn: import { createForm } from "@server/actions.js",
  entities: [User, Form]
}

action createInput {
  fn: import { createInput } from "@server/actions.js",
  entities: [Form, Input]
}

query getForm {
  fn: import { getForm } from "@server/queries.js",
  entities: [User, Form, Input]
}

query getUserForms {
  fn: import { getUserForms } from "@server/queries.js",
  entities: [User, Form]
}

route FormRoute { path: "/form/:formId", to: FormPage }
page FormPage {
  component: import { Form } from "@client/pages/Form.jsx",
  authRequired: true
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}
